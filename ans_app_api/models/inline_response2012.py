# coding: utf-8

"""
    API V2

    #### Authorization The API can only be accessed by creating a token at: [https://ans.app/users/tokens](https://ans.app/users/tokens).<br> The provided token is a Bearer token and needs to be set in the Request Header with key Authorization and value \"Bearer [token]\" for every request.<br>  #### Pagination The API generates several headers due to its use of pagination, this includes:      - Link, the standard link header defined in RFC 8288     - Current-Page, which shows the current page of the requested data     - Page-Items, which shows the amount of items per page     - Total-Pages, which shows the total amount of pages available     - Total-Count, which shows the total count of objects that was requested  #### Rate Limits The API enforces a rate limit of 500 request per minute per ip-address. If the rate limit is exceeded, the API responds with a HTTP 429 Too Many Requests response code.<br> You can use the following response headers to confirm the current rate limit and monitor the number of requests remaining in the current minute.<br>      - RateLimit-Limit, the current limit for your account     - RateLimit-Remaining, the number of remaining requests in the current minute     - RateLimit-Reset, the number of seconds until the limit is reset  #### Search The API offers search functionality through GET requests with a query. For all search endpoints see the [Search](#/Search) section.<br>      - The query must consist of the attribute and the search value connected with a colon (:) or a greater than (>) or smaller than (<) sign.     - You can use the greater and smaller than symbols for numeric and date values.     - If your search value contains whitespaces, you must quote your search query with single or double quotes.     - You can also combine searches by using a whitespace to separate the attributes.     - If your search value is equal to \"null\", all records with null values for that attribute will be found.     - We perform case sensitive exact match searches only.     - You can search for multiple values, by adding square brackets around the search parameters and seperating the parameters using commas without spaces.     - You can see some example queries in the documented search endpoints.   #### Webhooks The API offers you the ability to listen to specific events that occur within the application. For example, you can use webhooks to:      - Archive results when an assignment is archived     - Add users after an assignment is created     - Export a result after it has been approved  When creating a webhook you can specify which events you want to listen to. You can listen to all events, all events for a specific object or only one event for an object.<br> You can listen to 'create', 'update' and 'destroy' events on an object or a combination for example:      - '*' - all events for all objects     - 'assignment' - All events for an assignment     - 'assignment.update' - Only notify when an assignment is updated  The webhooks API returns a secret after creating a new webhook. This secret can be used to verify that the webhook call comes from Ans by creating a sha256 HMAC with the request body and this secret and comparing it to the X-Ans-Signature Header.<br>  Webhook requests are automatically retried up to five times if the endpoint returns certain HTTP response codes. The time interval between retries is gradually extended. Every webhook event is logged and contains the response code, headers and body of the response for debugging purposes.<br>  The following objects are currently supported:      - Assignment     - Result     - User   # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2012(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'year': 'int',
        'course_code': 'str',
        'self_enroll': 'bool',
        'external_id': 'str',
        'school_id': 'int',
        'trashed': 'bool',
        'trashed_at': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'class_ids': 'list[int]',
        'classes': 'list[InlineResponse2012Classes]',
        'study_ids': 'list[int]',
        'studies': 'list[InlineResponse2012Studies]',
        'period_ids': 'list[int]',
        'periods': 'list[InlineResponse2012Periods]',
        'learners': 'list[Apiv2schoolsschoolIdcoursesLearners]',
        'invigilators': 'list[Apiv2schoolsschoolIdcoursesInvigilators]',
        'reviewers': 'list[Apiv2schoolsschoolIdcoursesInvigilators]',
        'instructors': 'list[Apiv2schoolsschoolIdcoursesInvigilators]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'year': 'year',
        'course_code': 'course_code',
        'self_enroll': 'self_enroll',
        'external_id': 'external_id',
        'school_id': 'school_id',
        'trashed': 'trashed',
        'trashed_at': 'trashed_at',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'class_ids': 'class_ids',
        'classes': 'classes',
        'study_ids': 'study_ids',
        'studies': 'studies',
        'period_ids': 'period_ids',
        'periods': 'periods',
        'learners': 'learners',
        'invigilators': 'invigilators',
        'reviewers': 'reviewers',
        'instructors': 'instructors'
    }

    def __init__(self, id=None, name=None, year=None, course_code=None, self_enroll=None, external_id=None, school_id=None, trashed=None, trashed_at=None, created_at=None, updated_at=None, class_ids=None, classes=None, study_ids=None, studies=None, period_ids=None, periods=None, learners=None, invigilators=None, reviewers=None, instructors=None):  # noqa: E501
        """InlineResponse2012 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._year = None
        self._course_code = None
        self._self_enroll = None
        self._external_id = None
        self._school_id = None
        self._trashed = None
        self._trashed_at = None
        self._created_at = None
        self._updated_at = None
        self._class_ids = None
        self._classes = None
        self._study_ids = None
        self._studies = None
        self._period_ids = None
        self._periods = None
        self._learners = None
        self._invigilators = None
        self._reviewers = None
        self._instructors = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if year is not None:
            self.year = year
        if course_code is not None:
            self.course_code = course_code
        if self_enroll is not None:
            self.self_enroll = self_enroll
        if external_id is not None:
            self.external_id = external_id
        if school_id is not None:
            self.school_id = school_id
        if trashed is not None:
            self.trashed = trashed
        if trashed_at is not None:
            self.trashed_at = trashed_at
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if class_ids is not None:
            self.class_ids = class_ids
        if classes is not None:
            self.classes = classes
        if study_ids is not None:
            self.study_ids = study_ids
        if studies is not None:
            self.studies = studies
        if period_ids is not None:
            self.period_ids = period_ids
        if periods is not None:
            self.periods = periods
        if learners is not None:
            self.learners = learners
        if invigilators is not None:
            self.invigilators = invigilators
        if reviewers is not None:
            self.reviewers = reviewers
        if instructors is not None:
            self.instructors = instructors

    @property
    def id(self):
        """Gets the id of this InlineResponse2012.  # noqa: E501


        :return: The id of this InlineResponse2012.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2012.


        :param id: The id of this InlineResponse2012.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse2012.  # noqa: E501


        :return: The name of this InlineResponse2012.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse2012.


        :param name: The name of this InlineResponse2012.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def year(self):
        """Gets the year of this InlineResponse2012.  # noqa: E501


        :return: The year of this InlineResponse2012.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this InlineResponse2012.


        :param year: The year of this InlineResponse2012.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def course_code(self):
        """Gets the course_code of this InlineResponse2012.  # noqa: E501


        :return: The course_code of this InlineResponse2012.  # noqa: E501
        :rtype: str
        """
        return self._course_code

    @course_code.setter
    def course_code(self, course_code):
        """Sets the course_code of this InlineResponse2012.


        :param course_code: The course_code of this InlineResponse2012.  # noqa: E501
        :type: str
        """

        self._course_code = course_code

    @property
    def self_enroll(self):
        """Gets the self_enroll of this InlineResponse2012.  # noqa: E501


        :return: The self_enroll of this InlineResponse2012.  # noqa: E501
        :rtype: bool
        """
        return self._self_enroll

    @self_enroll.setter
    def self_enroll(self, self_enroll):
        """Sets the self_enroll of this InlineResponse2012.


        :param self_enroll: The self_enroll of this InlineResponse2012.  # noqa: E501
        :type: bool
        """

        self._self_enroll = self_enroll

    @property
    def external_id(self):
        """Gets the external_id of this InlineResponse2012.  # noqa: E501


        :return: The external_id of this InlineResponse2012.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this InlineResponse2012.


        :param external_id: The external_id of this InlineResponse2012.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def school_id(self):
        """Gets the school_id of this InlineResponse2012.  # noqa: E501


        :return: The school_id of this InlineResponse2012.  # noqa: E501
        :rtype: int
        """
        return self._school_id

    @school_id.setter
    def school_id(self, school_id):
        """Sets the school_id of this InlineResponse2012.


        :param school_id: The school_id of this InlineResponse2012.  # noqa: E501
        :type: int
        """

        self._school_id = school_id

    @property
    def trashed(self):
        """Gets the trashed of this InlineResponse2012.  # noqa: E501


        :return: The trashed of this InlineResponse2012.  # noqa: E501
        :rtype: bool
        """
        return self._trashed

    @trashed.setter
    def trashed(self, trashed):
        """Sets the trashed of this InlineResponse2012.


        :param trashed: The trashed of this InlineResponse2012.  # noqa: E501
        :type: bool
        """

        self._trashed = trashed

    @property
    def trashed_at(self):
        """Gets the trashed_at of this InlineResponse2012.  # noqa: E501


        :return: The trashed_at of this InlineResponse2012.  # noqa: E501
        :rtype: str
        """
        return self._trashed_at

    @trashed_at.setter
    def trashed_at(self, trashed_at):
        """Sets the trashed_at of this InlineResponse2012.


        :param trashed_at: The trashed_at of this InlineResponse2012.  # noqa: E501
        :type: str
        """

        self._trashed_at = trashed_at

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse2012.  # noqa: E501


        :return: The created_at of this InlineResponse2012.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse2012.


        :param created_at: The created_at of this InlineResponse2012.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this InlineResponse2012.  # noqa: E501


        :return: The updated_at of this InlineResponse2012.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InlineResponse2012.


        :param updated_at: The updated_at of this InlineResponse2012.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def class_ids(self):
        """Gets the class_ids of this InlineResponse2012.  # noqa: E501


        :return: The class_ids of this InlineResponse2012.  # noqa: E501
        :rtype: list[int]
        """
        return self._class_ids

    @class_ids.setter
    def class_ids(self, class_ids):
        """Sets the class_ids of this InlineResponse2012.


        :param class_ids: The class_ids of this InlineResponse2012.  # noqa: E501
        :type: list[int]
        """

        self._class_ids = class_ids

    @property
    def classes(self):
        """Gets the classes of this InlineResponse2012.  # noqa: E501


        :return: The classes of this InlineResponse2012.  # noqa: E501
        :rtype: list[InlineResponse2012Classes]
        """
        return self._classes

    @classes.setter
    def classes(self, classes):
        """Sets the classes of this InlineResponse2012.


        :param classes: The classes of this InlineResponse2012.  # noqa: E501
        :type: list[InlineResponse2012Classes]
        """

        self._classes = classes

    @property
    def study_ids(self):
        """Gets the study_ids of this InlineResponse2012.  # noqa: E501


        :return: The study_ids of this InlineResponse2012.  # noqa: E501
        :rtype: list[int]
        """
        return self._study_ids

    @study_ids.setter
    def study_ids(self, study_ids):
        """Sets the study_ids of this InlineResponse2012.


        :param study_ids: The study_ids of this InlineResponse2012.  # noqa: E501
        :type: list[int]
        """

        self._study_ids = study_ids

    @property
    def studies(self):
        """Gets the studies of this InlineResponse2012.  # noqa: E501


        :return: The studies of this InlineResponse2012.  # noqa: E501
        :rtype: list[InlineResponse2012Studies]
        """
        return self._studies

    @studies.setter
    def studies(self, studies):
        """Sets the studies of this InlineResponse2012.


        :param studies: The studies of this InlineResponse2012.  # noqa: E501
        :type: list[InlineResponse2012Studies]
        """

        self._studies = studies

    @property
    def period_ids(self):
        """Gets the period_ids of this InlineResponse2012.  # noqa: E501


        :return: The period_ids of this InlineResponse2012.  # noqa: E501
        :rtype: list[int]
        """
        return self._period_ids

    @period_ids.setter
    def period_ids(self, period_ids):
        """Sets the period_ids of this InlineResponse2012.


        :param period_ids: The period_ids of this InlineResponse2012.  # noqa: E501
        :type: list[int]
        """

        self._period_ids = period_ids

    @property
    def periods(self):
        """Gets the periods of this InlineResponse2012.  # noqa: E501


        :return: The periods of this InlineResponse2012.  # noqa: E501
        :rtype: list[InlineResponse2012Periods]
        """
        return self._periods

    @periods.setter
    def periods(self, periods):
        """Sets the periods of this InlineResponse2012.


        :param periods: The periods of this InlineResponse2012.  # noqa: E501
        :type: list[InlineResponse2012Periods]
        """

        self._periods = periods

    @property
    def learners(self):
        """Gets the learners of this InlineResponse2012.  # noqa: E501


        :return: The learners of this InlineResponse2012.  # noqa: E501
        :rtype: list[Apiv2schoolsschoolIdcoursesLearners]
        """
        return self._learners

    @learners.setter
    def learners(self, learners):
        """Sets the learners of this InlineResponse2012.


        :param learners: The learners of this InlineResponse2012.  # noqa: E501
        :type: list[Apiv2schoolsschoolIdcoursesLearners]
        """

        self._learners = learners

    @property
    def invigilators(self):
        """Gets the invigilators of this InlineResponse2012.  # noqa: E501


        :return: The invigilators of this InlineResponse2012.  # noqa: E501
        :rtype: list[Apiv2schoolsschoolIdcoursesInvigilators]
        """
        return self._invigilators

    @invigilators.setter
    def invigilators(self, invigilators):
        """Sets the invigilators of this InlineResponse2012.


        :param invigilators: The invigilators of this InlineResponse2012.  # noqa: E501
        :type: list[Apiv2schoolsschoolIdcoursesInvigilators]
        """

        self._invigilators = invigilators

    @property
    def reviewers(self):
        """Gets the reviewers of this InlineResponse2012.  # noqa: E501


        :return: The reviewers of this InlineResponse2012.  # noqa: E501
        :rtype: list[Apiv2schoolsschoolIdcoursesInvigilators]
        """
        return self._reviewers

    @reviewers.setter
    def reviewers(self, reviewers):
        """Sets the reviewers of this InlineResponse2012.


        :param reviewers: The reviewers of this InlineResponse2012.  # noqa: E501
        :type: list[Apiv2schoolsschoolIdcoursesInvigilators]
        """

        self._reviewers = reviewers

    @property
    def instructors(self):
        """Gets the instructors of this InlineResponse2012.  # noqa: E501


        :return: The instructors of this InlineResponse2012.  # noqa: E501
        :rtype: list[Apiv2schoolsschoolIdcoursesInvigilators]
        """
        return self._instructors

    @instructors.setter
    def instructors(self, instructors):
        """Sets the instructors of this InlineResponse2012.


        :param instructors: The instructors of this InlineResponse2012.  # noqa: E501
        :type: list[Apiv2schoolsschoolIdcoursesInvigilators]
        """

        self._instructors = instructors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2012, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2012):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
