# coding: utf-8

"""
    API V2

    #### Authorization The API can only be accessed by creating a token at: [https://ans.app/users/tokens](https://ans.app/users/tokens).<br> The provided token is a Bearer token and needs to be set in the Request Header with key Authorization and value \"Bearer [token]\" for every request.<br>  #### Pagination The API generates several headers due to its use of pagination, this includes:      - Link, the standard link header defined in RFC 8288     - Current-Page, which shows the current page of the requested data     - Page-Items, which shows the amount of items per page     - Total-Pages, which shows the total amount of pages available     - Total-Count, which shows the total count of objects that was requested  #### Rate Limits The API enforces a rate limit of 500 request per minute per ip-address. If the rate limit is exceeded, the API responds with a HTTP 429 Too Many Requests response code.<br> You can use the following response headers to confirm the current rate limit and monitor the number of requests remaining in the current minute.<br>      - RateLimit-Limit, the current limit for your account     - RateLimit-Remaining, the number of remaining requests in the current minute     - RateLimit-Reset, the number of seconds until the limit is reset  #### Search The API offers search functionality through GET requests with a query. For all search endpoints see the [Search](#/Search) section.<br>      - The query must consist of the attribute and the search value connected with a colon (:) or a greater than (>) or smaller than (<) sign.     - You can use the greater and smaller than symbols for numeric and date values.     - If your search value contains whitespaces, you must quote your search query with single or double quotes.     - You can also combine searches by using a whitespace to separate the attributes.     - If your search value is equal to \"null\", all records with null values for that attribute will be found.     - We perform case sensitive exact match searches only.     - You can search for multiple values, by adding square brackets around the search parameters and seperating the parameters using commas without spaces.     - You can see some example queries in the documented search endpoints.   #### Webhooks The API offers you the ability to listen to specific events that occur within the application. For example, you can use webhooks to:      - Archive results when an assignment is archived     - Add users after an assignment is created     - Export a result after it has been approved  When creating a webhook you can specify which events you want to listen to. You can listen to all events, all events for a specific object or only one event for an object.<br> You can listen to 'create', 'update' and 'destroy' events on an object or a combination for example:      - '*' - all events for all objects     - 'assignment' - All events for an assignment     - 'assignment.update' - Only notify when an assignment is updated  The webhooks API returns a secret after creating a new webhook. This secret can be used to verify that the webhook call comes from Ans by creating a sha256 HMAC with the request body and this secret and comparing it to the X-Ans-Signature Header.<br>  Webhook requests are automatically retried up to five times if the endpoint returns certain HTTP response codes. The time interval between retries is gradually extended. Every webhook event is logged and contains the response code, headers and body of the response for debugging purposes.<br>  The following objects are currently supported:      - Assignment     - Result     - User   # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CoursesIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'year': 'int',
        'course_code': 'str',
        'self_enroll': 'bool',
        'external_id': 'str',
        'trashed': 'bool',
        'class_ids': 'list[int]',
        'study_ids': 'list[int]',
        'period_ids': 'list[int]',
        'learners': 'list[Apiv2schoolsschoolIdcoursesLearners]',
        'invigilators': 'list[Apiv2schoolsschoolIdcoursesInvigilators]',
        'reviewers': 'list[Apiv2schoolsschoolIdcoursesInvigilators]',
        'instructors': 'list[Apiv2schoolsschoolIdcoursesInvigilators]'
    }

    attribute_map = {
        'name': 'name',
        'year': 'year',
        'course_code': 'course_code',
        'self_enroll': 'self_enroll',
        'external_id': 'external_id',
        'trashed': 'trashed',
        'class_ids': 'class_ids',
        'study_ids': 'study_ids',
        'period_ids': 'period_ids',
        'learners': 'learners',
        'invigilators': 'invigilators',
        'reviewers': 'reviewers',
        'instructors': 'instructors'
    }

    def __init__(self, name=None, year=None, course_code=None, self_enroll=False, external_id=None, trashed=False, class_ids=None, study_ids=None, period_ids=None, learners=None, invigilators=None, reviewers=None, instructors=None):  # noqa: E501
        """CoursesIdBody - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._year = None
        self._course_code = None
        self._self_enroll = None
        self._external_id = None
        self._trashed = None
        self._class_ids = None
        self._study_ids = None
        self._period_ids = None
        self._learners = None
        self._invigilators = None
        self._reviewers = None
        self._instructors = None
        self.discriminator = None
        self.name = name
        if year is not None:
            self.year = year
        if course_code is not None:
            self.course_code = course_code
        if self_enroll is not None:
            self.self_enroll = self_enroll
        if external_id is not None:
            self.external_id = external_id
        if trashed is not None:
            self.trashed = trashed
        if class_ids is not None:
            self.class_ids = class_ids
        if study_ids is not None:
            self.study_ids = study_ids
        if period_ids is not None:
            self.period_ids = period_ids
        if learners is not None:
            self.learners = learners
        if invigilators is not None:
            self.invigilators = invigilators
        if reviewers is not None:
            self.reviewers = reviewers
        if instructors is not None:
            self.instructors = instructors

    @property
    def name(self):
        """Gets the name of this CoursesIdBody.  # noqa: E501

        The name of the course  # noqa: E501

        :return: The name of this CoursesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CoursesIdBody.

        The name of the course  # noqa: E501

        :param name: The name of this CoursesIdBody.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def year(self):
        """Gets the year of this CoursesIdBody.  # noqa: E501

        The school year in which the course takes place. For example, select year 2022 for school year 2022/2023. Ans will select the current school year by default if no year is set  # noqa: E501

        :return: The year of this CoursesIdBody.  # noqa: E501
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year):
        """Sets the year of this CoursesIdBody.

        The school year in which the course takes place. For example, select year 2022 for school year 2022/2023. Ans will select the current school year by default if no year is set  # noqa: E501

        :param year: The year of this CoursesIdBody.  # noqa: E501
        :type: int
        """

        self._year = year

    @property
    def course_code(self):
        """Gets the course_code of this CoursesIdBody.  # noqa: E501

        Code used to refer to the course  # noqa: E501

        :return: The course_code of this CoursesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._course_code

    @course_code.setter
    def course_code(self, course_code):
        """Sets the course_code of this CoursesIdBody.

        Code used to refer to the course  # noqa: E501

        :param course_code: The course_code of this CoursesIdBody.  # noqa: E501
        :type: str
        """

        self._course_code = course_code

    @property
    def self_enroll(self):
        """Gets the self_enroll of this CoursesIdBody.  # noqa: E501

        Allows a student to enroll themselves in the course if set to true  # noqa: E501

        :return: The self_enroll of this CoursesIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._self_enroll

    @self_enroll.setter
    def self_enroll(self, self_enroll):
        """Sets the self_enroll of this CoursesIdBody.

        Allows a student to enroll themselves in the course if set to true  # noqa: E501

        :param self_enroll: The self_enroll of this CoursesIdBody.  # noqa: E501
        :type: bool
        """

        self._self_enroll = self_enroll

    @property
    def external_id(self):
        """Gets the external_id of this CoursesIdBody.  # noqa: E501

        An external id to reference the course  # noqa: E501

        :return: The external_id of this CoursesIdBody.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this CoursesIdBody.

        An external id to reference the course  # noqa: E501

        :param external_id: The external_id of this CoursesIdBody.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def trashed(self):
        """Gets the trashed of this CoursesIdBody.  # noqa: E501

        Defines if a course has been soft deleted  # noqa: E501

        :return: The trashed of this CoursesIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._trashed

    @trashed.setter
    def trashed(self, trashed):
        """Sets the trashed of this CoursesIdBody.

        Defines if a course has been soft deleted  # noqa: E501

        :param trashed: The trashed of this CoursesIdBody.  # noqa: E501
        :type: bool
        """

        self._trashed = trashed

    @property
    def class_ids(self):
        """Gets the class_ids of this CoursesIdBody.  # noqa: E501

        An array of class ids that are part of the course  # noqa: E501

        :return: The class_ids of this CoursesIdBody.  # noqa: E501
        :rtype: list[int]
        """
        return self._class_ids

    @class_ids.setter
    def class_ids(self, class_ids):
        """Sets the class_ids of this CoursesIdBody.

        An array of class ids that are part of the course  # noqa: E501

        :param class_ids: The class_ids of this CoursesIdBody.  # noqa: E501
        :type: list[int]
        """

        self._class_ids = class_ids

    @property
    def study_ids(self):
        """Gets the study_ids of this CoursesIdBody.  # noqa: E501

        An array of study ids that the course belongs to  # noqa: E501

        :return: The study_ids of this CoursesIdBody.  # noqa: E501
        :rtype: list[int]
        """
        return self._study_ids

    @study_ids.setter
    def study_ids(self, study_ids):
        """Sets the study_ids of this CoursesIdBody.

        An array of study ids that the course belongs to  # noqa: E501

        :param study_ids: The study_ids of this CoursesIdBody.  # noqa: E501
        :type: list[int]
        """

        self._study_ids = study_ids

    @property
    def period_ids(self):
        """Gets the period_ids of this CoursesIdBody.  # noqa: E501

        An array of period ids that the course takes place in  # noqa: E501

        :return: The period_ids of this CoursesIdBody.  # noqa: E501
        :rtype: list[int]
        """
        return self._period_ids

    @period_ids.setter
    def period_ids(self, period_ids):
        """Sets the period_ids of this CoursesIdBody.

        An array of period ids that the course takes place in  # noqa: E501

        :param period_ids: The period_ids of this CoursesIdBody.  # noqa: E501
        :type: list[int]
        """

        self._period_ids = period_ids

    @property
    def learners(self):
        """Gets the learners of this CoursesIdBody.  # noqa: E501

        An array of user ids that will be in the course and have the learner role  # noqa: E501

        :return: The learners of this CoursesIdBody.  # noqa: E501
        :rtype: list[Apiv2schoolsschoolIdcoursesLearners]
        """
        return self._learners

    @learners.setter
    def learners(self, learners):
        """Sets the learners of this CoursesIdBody.

        An array of user ids that will be in the course and have the learner role  # noqa: E501

        :param learners: The learners of this CoursesIdBody.  # noqa: E501
        :type: list[Apiv2schoolsschoolIdcoursesLearners]
        """

        self._learners = learners

    @property
    def invigilators(self):
        """Gets the invigilators of this CoursesIdBody.  # noqa: E501

        An array of user ids that will be in the course that have the invigilator role  # noqa: E501

        :return: The invigilators of this CoursesIdBody.  # noqa: E501
        :rtype: list[Apiv2schoolsschoolIdcoursesInvigilators]
        """
        return self._invigilators

    @invigilators.setter
    def invigilators(self, invigilators):
        """Sets the invigilators of this CoursesIdBody.

        An array of user ids that will be in the course that have the invigilator role  # noqa: E501

        :param invigilators: The invigilators of this CoursesIdBody.  # noqa: E501
        :type: list[Apiv2schoolsschoolIdcoursesInvigilators]
        """

        self._invigilators = invigilators

    @property
    def reviewers(self):
        """Gets the reviewers of this CoursesIdBody.  # noqa: E501

        An array of user ids that will be in the course that have the reviewer role  # noqa: E501

        :return: The reviewers of this CoursesIdBody.  # noqa: E501
        :rtype: list[Apiv2schoolsschoolIdcoursesInvigilators]
        """
        return self._reviewers

    @reviewers.setter
    def reviewers(self, reviewers):
        """Sets the reviewers of this CoursesIdBody.

        An array of user ids that will be in the course that have the reviewer role  # noqa: E501

        :param reviewers: The reviewers of this CoursesIdBody.  # noqa: E501
        :type: list[Apiv2schoolsschoolIdcoursesInvigilators]
        """

        self._reviewers = reviewers

    @property
    def instructors(self):
        """Gets the instructors of this CoursesIdBody.  # noqa: E501

        An array of user ids that will be in the course that have the instructor role  # noqa: E501

        :return: The instructors of this CoursesIdBody.  # noqa: E501
        :rtype: list[Apiv2schoolsschoolIdcoursesInvigilators]
        """
        return self._instructors

    @instructors.setter
    def instructors(self, instructors):
        """Sets the instructors of this CoursesIdBody.

        An array of user ids that will be in the course that have the instructor role  # noqa: E501

        :param instructors: The instructors of this CoursesIdBody.  # noqa: E501
        :type: list[Apiv2schoolsschoolIdcoursesInvigilators]
        """

        self._instructors = instructors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CoursesIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CoursesIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
