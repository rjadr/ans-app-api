# coding: utf-8

"""
    API V2

    #### Authorization The API can only be accessed by creating a token at: [https://ans.app/users/tokens](https://ans.app/users/tokens).<br> The provided token is a Bearer token and needs to be set in the Request Header with key Authorization and value \"Bearer [token]\" for every request.<br>  #### Pagination The API generates several headers due to its use of pagination, this includes:      - Link, the standard link header defined in RFC 8288     - Current-Page, which shows the current page of the requested data     - Page-Items, which shows the amount of items per page     - Total-Pages, which shows the total amount of pages available     - Total-Count, which shows the total count of objects that was requested  #### Rate Limits The API enforces a rate limit of 500 request per minute per ip-address. If the rate limit is exceeded, the API responds with a HTTP 429 Too Many Requests response code.<br> You can use the following response headers to confirm the current rate limit and monitor the number of requests remaining in the current minute.<br>      - RateLimit-Limit, the current limit for your account     - RateLimit-Remaining, the number of remaining requests in the current minute     - RateLimit-Reset, the number of seconds until the limit is reset  #### Search The API offers search functionality through GET requests with a query. For all search endpoints see the [Search](#/Search) section.<br>      - The query must consist of the attribute and the search value connected with a colon (:) or a greater than (>) or smaller than (<) sign.     - You can use the greater and smaller than symbols for numeric and date values.     - If your search value contains whitespaces, you must quote your search query with single or double quotes.     - You can also combine searches by using a whitespace to separate the attributes.     - If your search value is equal to \"null\", all records with null values for that attribute will be found.     - We perform case sensitive exact match searches only.     - You can search for multiple values, by adding square brackets around the search parameters and seperating the parameters using commas without spaces.     - You can see some example queries in the documented search endpoints.   #### Webhooks The API offers you the ability to listen to specific events that occur within the application. For example, you can use webhooks to:      - Archive results when an assignment is archived     - Add users after an assignment is created     - Export a result after it has been approved  When creating a webhook you can specify which events you want to listen to. You can listen to all events, all events for a specific object or only one event for an object.<br> You can listen to 'create', 'update' and 'destroy' events on an object or a combination for example:      - '*' - all events for all objects     - 'assignment' - All events for an assignment     - 'assignment.update' - Only notify when an assignment is updated  The webhooks API returns a secret after creating a new webhook. This secret can be used to verify that the webhook call comes from Ans by creating a sha256 HMAC with the request body and this secret and comparing it to the X-Ans-Signature Header.<br>  Webhook requests are automatically retried up to five times if the endpoint returns certain HTTP response codes. The time interval between retries is gradually extended. Every webhook event is logged and contains the response code, headers and body of the response for debugging purposes.<br>  The following objects are currently supported:      - Assignment     - Result     - User   # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssignmentIdCoverBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_comments': 'bool',
        'description': 'str',
        'description_after': 'str',
        'description_before': 'str',
        'display_date_and_time': 'bool',
        'display_headers': 'bool',
        'enumerate_exercises': 'OneOfassignmentIdCoverBodyEnumerateExercises',
        'enumerate_questions': 'bool',
        'exercise_box': 'bool',
        'indicate_points': 'bool',
        'randomize_exercise_order': 'bool',
        'second_page_empty': 'bool',
        'show_choice_instruction': 'bool',
        'show_exercise_group_headers': 'bool',
        'shuffle_choices': 'bool',
        'student_name_field': 'bool'
    }

    attribute_map = {
        'allow_comments': 'allow_comments',
        'description': 'description',
        'description_after': 'description_after',
        'description_before': 'description_before',
        'display_date_and_time': 'display_date_and_time',
        'display_headers': 'display_headers',
        'enumerate_exercises': 'enumerate_exercises',
        'enumerate_questions': 'enumerate_questions',
        'exercise_box': 'exercise_box',
        'indicate_points': 'indicate_points',
        'randomize_exercise_order': 'randomize_exercise_order',
        'second_page_empty': 'second_page_empty',
        'show_choice_instruction': 'show_choice_instruction',
        'show_exercise_group_headers': 'show_exercise_group_headers',
        'shuffle_choices': 'shuffle_choices',
        'student_name_field': 'student_name_field'
    }

    def __init__(self, allow_comments=False, description=None, description_after=None, description_before=None, display_date_and_time=True, display_headers=True, enumerate_exercises=None, enumerate_questions=True, exercise_box=True, indicate_points=True, randomize_exercise_order=False, second_page_empty=False, show_choice_instruction=False, show_exercise_group_headers=False, shuffle_choices=True, student_name_field=True):  # noqa: E501
        """AssignmentIdCoverBody - a model defined in Swagger"""  # noqa: E501
        self._allow_comments = None
        self._description = None
        self._description_after = None
        self._description_before = None
        self._display_date_and_time = None
        self._display_headers = None
        self._enumerate_exercises = None
        self._enumerate_questions = None
        self._exercise_box = None
        self._indicate_points = None
        self._randomize_exercise_order = None
        self._second_page_empty = None
        self._show_choice_instruction = None
        self._show_exercise_group_headers = None
        self._shuffle_choices = None
        self._student_name_field = None
        self.discriminator = None
        if allow_comments is not None:
            self.allow_comments = allow_comments
        if description is not None:
            self.description = description
        if description_after is not None:
            self.description_after = description_after
        if description_before is not None:
            self.description_before = description_before
        if display_date_and_time is not None:
            self.display_date_and_time = display_date_and_time
        if display_headers is not None:
            self.display_headers = display_headers
        if enumerate_exercises is not None:
            self.enumerate_exercises = enumerate_exercises
        if enumerate_questions is not None:
            self.enumerate_questions = enumerate_questions
        if exercise_box is not None:
            self.exercise_box = exercise_box
        if indicate_points is not None:
            self.indicate_points = indicate_points
        if randomize_exercise_order is not None:
            self.randomize_exercise_order = randomize_exercise_order
        if second_page_empty is not None:
            self.second_page_empty = second_page_empty
        if show_choice_instruction is not None:
            self.show_choice_instruction = show_choice_instruction
        if show_exercise_group_headers is not None:
            self.show_exercise_group_headers = show_exercise_group_headers
        if shuffle_choices is not None:
            self.shuffle_choices = shuffle_choices
        if student_name_field is not None:
            self.student_name_field = student_name_field

    @property
    def allow_comments(self):
        """Gets the allow_comments of this AssignmentIdCoverBody.  # noqa: E501

        Defines if adding comments after the test is allowed [beta]  # noqa: E501

        :return: The allow_comments of this AssignmentIdCoverBody.  # noqa: E501
        :rtype: bool
        """
        return self._allow_comments

    @allow_comments.setter
    def allow_comments(self, allow_comments):
        """Sets the allow_comments of this AssignmentIdCoverBody.

        Defines if adding comments after the test is allowed [beta]  # noqa: E501

        :param allow_comments: The allow_comments of this AssignmentIdCoverBody.  # noqa: E501
        :type: bool
        """

        self._allow_comments = allow_comments

    @property
    def description(self):
        """Gets the description of this AssignmentIdCoverBody.  # noqa: E501

        The description  # noqa: E501

        :return: The description of this AssignmentIdCoverBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AssignmentIdCoverBody.

        The description  # noqa: E501

        :param description: The description of this AssignmentIdCoverBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def description_after(self):
        """Gets the description_after of this AssignmentIdCoverBody.  # noqa: E501

        Section after the description  # noqa: E501

        :return: The description_after of this AssignmentIdCoverBody.  # noqa: E501
        :rtype: str
        """
        return self._description_after

    @description_after.setter
    def description_after(self, description_after):
        """Sets the description_after of this AssignmentIdCoverBody.

        Section after the description  # noqa: E501

        :param description_after: The description_after of this AssignmentIdCoverBody.  # noqa: E501
        :type: str
        """

        self._description_after = description_after

    @property
    def description_before(self):
        """Gets the description_before of this AssignmentIdCoverBody.  # noqa: E501

        Section before the description  # noqa: E501

        :return: The description_before of this AssignmentIdCoverBody.  # noqa: E501
        :rtype: str
        """
        return self._description_before

    @description_before.setter
    def description_before(self, description_before):
        """Sets the description_before of this AssignmentIdCoverBody.

        Section before the description  # noqa: E501

        :param description_before: The description_before of this AssignmentIdCoverBody.  # noqa: E501
        :type: str
        """

        self._description_before = description_before

    @property
    def display_date_and_time(self):
        """Gets the display_date_and_time of this AssignmentIdCoverBody.  # noqa: E501

        Display the date and time  # noqa: E501

        :return: The display_date_and_time of this AssignmentIdCoverBody.  # noqa: E501
        :rtype: bool
        """
        return self._display_date_and_time

    @display_date_and_time.setter
    def display_date_and_time(self, display_date_and_time):
        """Sets the display_date_and_time of this AssignmentIdCoverBody.

        Display the date and time  # noqa: E501

        :param display_date_and_time: The display_date_and_time of this AssignmentIdCoverBody.  # noqa: E501
        :type: bool
        """

        self._display_date_and_time = display_date_and_time

    @property
    def display_headers(self):
        """Gets the display_headers of this AssignmentIdCoverBody.  # noqa: E501

        Display the headers  # noqa: E501

        :return: The display_headers of this AssignmentIdCoverBody.  # noqa: E501
        :rtype: bool
        """
        return self._display_headers

    @display_headers.setter
    def display_headers(self, display_headers):
        """Sets the display_headers of this AssignmentIdCoverBody.

        Display the headers  # noqa: E501

        :param display_headers: The display_headers of this AssignmentIdCoverBody.  # noqa: E501
        :type: bool
        """

        self._display_headers = display_headers

    @property
    def enumerate_exercises(self):
        """Gets the enumerate_exercises of this AssignmentIdCoverBody.  # noqa: E501


        :return: The enumerate_exercises of this AssignmentIdCoverBody.  # noqa: E501
        :rtype: OneOfassignmentIdCoverBodyEnumerateExercises
        """
        return self._enumerate_exercises

    @enumerate_exercises.setter
    def enumerate_exercises(self, enumerate_exercises):
        """Sets the enumerate_exercises of this AssignmentIdCoverBody.


        :param enumerate_exercises: The enumerate_exercises of this AssignmentIdCoverBody.  # noqa: E501
        :type: OneOfassignmentIdCoverBodyEnumerateExercises
        """

        self._enumerate_exercises = enumerate_exercises

    @property
    def enumerate_questions(self):
        """Gets the enumerate_questions of this AssignmentIdCoverBody.  # noqa: E501

        Display the enumeration for exercises and questions  # noqa: E501

        :return: The enumerate_questions of this AssignmentIdCoverBody.  # noqa: E501
        :rtype: bool
        """
        return self._enumerate_questions

    @enumerate_questions.setter
    def enumerate_questions(self, enumerate_questions):
        """Sets the enumerate_questions of this AssignmentIdCoverBody.

        Display the enumeration for exercises and questions  # noqa: E501

        :param enumerate_questions: The enumerate_questions of this AssignmentIdCoverBody.  # noqa: E501
        :type: bool
        """

        self._enumerate_questions = enumerate_questions

    @property
    def exercise_box(self):
        """Gets the exercise_box of this AssignmentIdCoverBody.  # noqa: E501

        Display exercise boxes on the front page of a written test  # noqa: E501

        :return: The exercise_box of this AssignmentIdCoverBody.  # noqa: E501
        :rtype: bool
        """
        return self._exercise_box

    @exercise_box.setter
    def exercise_box(self, exercise_box):
        """Sets the exercise_box of this AssignmentIdCoverBody.

        Display exercise boxes on the front page of a written test  # noqa: E501

        :param exercise_box: The exercise_box of this AssignmentIdCoverBody.  # noqa: E501
        :type: bool
        """

        self._exercise_box = exercise_box

    @property
    def indicate_points(self):
        """Gets the indicate_points of this AssignmentIdCoverBody.  # noqa: E501

        Display the points of the questions  # noqa: E501

        :return: The indicate_points of this AssignmentIdCoverBody.  # noqa: E501
        :rtype: bool
        """
        return self._indicate_points

    @indicate_points.setter
    def indicate_points(self, indicate_points):
        """Sets the indicate_points of this AssignmentIdCoverBody.

        Display the points of the questions  # noqa: E501

        :param indicate_points: The indicate_points of this AssignmentIdCoverBody.  # noqa: E501
        :type: bool
        """

        self._indicate_points = indicate_points

    @property
    def randomize_exercise_order(self):
        """Gets the randomize_exercise_order of this AssignmentIdCoverBody.  # noqa: E501

        Randomize the order of exercises in a digital test  # noqa: E501

        :return: The randomize_exercise_order of this AssignmentIdCoverBody.  # noqa: E501
        :rtype: bool
        """
        return self._randomize_exercise_order

    @randomize_exercise_order.setter
    def randomize_exercise_order(self, randomize_exercise_order):
        """Sets the randomize_exercise_order of this AssignmentIdCoverBody.

        Randomize the order of exercises in a digital test  # noqa: E501

        :param randomize_exercise_order: The randomize_exercise_order of this AssignmentIdCoverBody.  # noqa: E501
        :type: bool
        """

        self._randomize_exercise_order = randomize_exercise_order

    @property
    def second_page_empty(self):
        """Gets the second_page_empty of this AssignmentIdCoverBody.  # noqa: E501

        Keep the second page empty for a written test  # noqa: E501

        :return: The second_page_empty of this AssignmentIdCoverBody.  # noqa: E501
        :rtype: bool
        """
        return self._second_page_empty

    @second_page_empty.setter
    def second_page_empty(self, second_page_empty):
        """Sets the second_page_empty of this AssignmentIdCoverBody.

        Keep the second page empty for a written test  # noqa: E501

        :param second_page_empty: The second_page_empty of this AssignmentIdCoverBody.  # noqa: E501
        :type: bool
        """

        self._second_page_empty = second_page_empty

    @property
    def show_choice_instruction(self):
        """Gets the show_choice_instruction of this AssignmentIdCoverBody.  # noqa: E501

        Display choice instructions on the front page of a written test  # noqa: E501

        :return: The show_choice_instruction of this AssignmentIdCoverBody.  # noqa: E501
        :rtype: bool
        """
        return self._show_choice_instruction

    @show_choice_instruction.setter
    def show_choice_instruction(self, show_choice_instruction):
        """Sets the show_choice_instruction of this AssignmentIdCoverBody.

        Display choice instructions on the front page of a written test  # noqa: E501

        :param show_choice_instruction: The show_choice_instruction of this AssignmentIdCoverBody.  # noqa: E501
        :type: bool
        """

        self._show_choice_instruction = show_choice_instruction

    @property
    def show_exercise_group_headers(self):
        """Gets the show_exercise_group_headers of this AssignmentIdCoverBody.  # noqa: E501

        Display the headers for the exercise group in a digital test  # noqa: E501

        :return: The show_exercise_group_headers of this AssignmentIdCoverBody.  # noqa: E501
        :rtype: bool
        """
        return self._show_exercise_group_headers

    @show_exercise_group_headers.setter
    def show_exercise_group_headers(self, show_exercise_group_headers):
        """Sets the show_exercise_group_headers of this AssignmentIdCoverBody.

        Display the headers for the exercise group in a digital test  # noqa: E501

        :param show_exercise_group_headers: The show_exercise_group_headers of this AssignmentIdCoverBody.  # noqa: E501
        :type: bool
        """

        self._show_exercise_group_headers = show_exercise_group_headers

    @property
    def shuffle_choices(self):
        """Gets the shuffle_choices of this AssignmentIdCoverBody.  # noqa: E501

        Shuffles the choices for questions  # noqa: E501

        :return: The shuffle_choices of this AssignmentIdCoverBody.  # noqa: E501
        :rtype: bool
        """
        return self._shuffle_choices

    @shuffle_choices.setter
    def shuffle_choices(self, shuffle_choices):
        """Sets the shuffle_choices of this AssignmentIdCoverBody.

        Shuffles the choices for questions  # noqa: E501

        :param shuffle_choices: The shuffle_choices of this AssignmentIdCoverBody.  # noqa: E501
        :type: bool
        """

        self._shuffle_choices = shuffle_choices

    @property
    def student_name_field(self):
        """Gets the student_name_field of this AssignmentIdCoverBody.  # noqa: E501

        Display the student name field on a written test  # noqa: E501

        :return: The student_name_field of this AssignmentIdCoverBody.  # noqa: E501
        :rtype: bool
        """
        return self._student_name_field

    @student_name_field.setter
    def student_name_field(self, student_name_field):
        """Sets the student_name_field of this AssignmentIdCoverBody.

        Display the student name field on a written test  # noqa: E501

        :param student_name_field: The student_name_field of this AssignmentIdCoverBody.  # noqa: E501
        :type: bool
        """

        self._student_name_field = student_name_field

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssignmentIdCoverBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssignmentIdCoverBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
