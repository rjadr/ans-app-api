# coding: utf-8

"""
    API V2

    #### Authorization The API can only be accessed by creating a token at: [https://ans.app/users/tokens](https://ans.app/users/tokens).<br> The provided token is a Bearer token and needs to be set in the Request Header with key Authorization and value \"Bearer [token]\" for every request.<br>  #### Pagination The API generates several headers due to its use of pagination, this includes:      - Link, the standard link header defined in RFC 8288     - Current-Page, which shows the current page of the requested data     - Page-Items, which shows the amount of items per page     - Total-Pages, which shows the total amount of pages available     - Total-Count, which shows the total count of objects that was requested  #### Rate Limits The API enforces a rate limit of 500 request per minute per ip-address. If the rate limit is exceeded, the API responds with a HTTP 429 Too Many Requests response code.<br> You can use the following response headers to confirm the current rate limit and monitor the number of requests remaining in the current minute.<br>      - RateLimit-Limit, the current limit for your account     - RateLimit-Remaining, the number of remaining requests in the current minute     - RateLimit-Reset, the number of seconds until the limit is reset  #### Search The API offers search functionality through GET requests with a query. For all search endpoints see the [Search](#/Search) section.<br>      - The query must consist of the attribute and the search value connected with a colon (:) or a greater than (>) or smaller than (<) sign.     - You can use the greater and smaller than symbols for numeric and date values.     - If your search value contains whitespaces, you must quote your search query with single or double quotes.     - You can also combine searches by using a whitespace to separate the attributes.     - If your search value is equal to \"null\", all records with null values for that attribute will be found.     - We perform case sensitive exact match searches only.     - You can search for multiple values, by adding square brackets around the search parameters and seperating the parameters using commas without spaces.     - You can see some example queries in the documented search endpoints.   #### Webhooks The API offers you the ability to listen to specific events that occur within the application. For example, you can use webhooks to:      - Archive results when an assignment is archived     - Add users after an assignment is created     - Export a result after it has been approved  When creating a webhook you can specify which events you want to listen to. You can listen to all events, all events for a specific object or only one event for an object.<br> You can listen to 'create', 'update' and 'destroy' events on an object or a combination for example:      - '*' - all events for all objects     - 'assignment' - All events for an assignment     - 'assignment.update' - Only notify when an assignment is updated  The webhooks API returns a secret after creating a new webhook. This secret can be used to verify that the webhook call comes from Ans by creating a sha256 HMAC with the request body and this secret and comparing it to the X-Ans-Signature Header.<br>  Webhook requests are automatically retried up to five times if the endpoint returns certain HTTP response codes. The time interval between retries is gradually extended. Every webhook event is logged and contains the response code, headers and body of the response for debugging purposes.<br>  The following objects are currently supported:      - Assignment     - Result     - User   # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SchoolIdUsersBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'student_number': 'int',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'email': 'str',
        'role': 'OneOfschoolIdUsersBodyRole',
        'role_id': 'int',
        'active': 'bool',
        'trashed': 'bool',
        'alumni': 'bool',
        'uid': 'str',
        'external_id': 'str',
        'courses': 'list[Apiv2schoolsschoolIdusersCourses]',
        'question_banks': 'list[Apiv2schoolsschoolIdusersQuestionBanks]',
        'department_ids': 'list[int]'
    }

    attribute_map = {
        'student_number': 'student_number',
        'first_name': 'first_name',
        'middle_name': 'middle_name',
        'last_name': 'last_name',
        'email': 'email',
        'role': 'role',
        'role_id': 'role_id',
        'active': 'active',
        'trashed': 'trashed',
        'alumni': 'alumni',
        'uid': 'uid',
        'external_id': 'external_id',
        'courses': 'courses',
        'question_banks': 'question_banks',
        'department_ids': 'department_ids'
    }

    def __init__(self, student_number=None, first_name=None, middle_name=None, last_name=None, email=None, role=None, role_id=None, active=True, trashed=False, alumni=False, uid=None, external_id=None, courses=None, question_banks=None, department_ids=None):  # noqa: E501
        """SchoolIdUsersBody - a model defined in Swagger"""  # noqa: E501
        self._student_number = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._email = None
        self._role = None
        self._role_id = None
        self._active = None
        self._trashed = None
        self._alumni = None
        self._uid = None
        self._external_id = None
        self._courses = None
        self._question_banks = None
        self._department_ids = None
        self.discriminator = None
        if student_number is not None:
            self.student_number = student_number
        if first_name is not None:
            self.first_name = first_name
        if middle_name is not None:
            self.middle_name = middle_name
        if last_name is not None:
            self.last_name = last_name
        self.email = email
        if role is not None:
            self.role = role
        if role_id is not None:
            self.role_id = role_id
        if active is not None:
            self.active = active
        if trashed is not None:
            self.trashed = trashed
        if alumni is not None:
            self.alumni = alumni
        if uid is not None:
            self.uid = uid
        if external_id is not None:
            self.external_id = external_id
        if courses is not None:
            self.courses = courses
        if question_banks is not None:
            self.question_banks = question_banks
        if department_ids is not None:
            self.department_ids = department_ids

    @property
    def student_number(self):
        """Gets the student_number of this SchoolIdUsersBody.  # noqa: E501

        A unique set of numbers which is required for students (validated against the length set on the school)  # noqa: E501

        :return: The student_number of this SchoolIdUsersBody.  # noqa: E501
        :rtype: int
        """
        return self._student_number

    @student_number.setter
    def student_number(self, student_number):
        """Sets the student_number of this SchoolIdUsersBody.

        A unique set of numbers which is required for students (validated against the length set on the school)  # noqa: E501

        :param student_number: The student_number of this SchoolIdUsersBody.  # noqa: E501
        :type: int
        """

        self._student_number = student_number

    @property
    def first_name(self):
        """Gets the first_name of this SchoolIdUsersBody.  # noqa: E501

        The first name of a user  # noqa: E501

        :return: The first_name of this SchoolIdUsersBody.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this SchoolIdUsersBody.

        The first name of a user  # noqa: E501

        :param first_name: The first_name of this SchoolIdUsersBody.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this SchoolIdUsersBody.  # noqa: E501

        The middle name of a user  # noqa: E501

        :return: The middle_name of this SchoolIdUsersBody.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this SchoolIdUsersBody.

        The middle name of a user  # noqa: E501

        :param middle_name: The middle_name of this SchoolIdUsersBody.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this SchoolIdUsersBody.  # noqa: E501

        The last name of a user  # noqa: E501

        :return: The last_name of this SchoolIdUsersBody.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this SchoolIdUsersBody.

        The last name of a user  # noqa: E501

        :param last_name: The last_name of this SchoolIdUsersBody.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def email(self):
        """Gets the email of this SchoolIdUsersBody.  # noqa: E501

        The email tied to the user account  # noqa: E501

        :return: The email of this SchoolIdUsersBody.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this SchoolIdUsersBody.

        The email tied to the user account  # noqa: E501

        :param email: The email of this SchoolIdUsersBody.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def role(self):
        """Gets the role of this SchoolIdUsersBody.  # noqa: E501


        :return: The role of this SchoolIdUsersBody.  # noqa: E501
        :rtype: OneOfschoolIdUsersBodyRole
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this SchoolIdUsersBody.


        :param role: The role of this SchoolIdUsersBody.  # noqa: E501
        :type: OneOfschoolIdUsersBodyRole
        """

        self._role = role

    @property
    def role_id(self):
        """Gets the role_id of this SchoolIdUsersBody.  # noqa: E501

        A custom role id when using custom defined roles  # noqa: E501

        :return: The role_id of this SchoolIdUsersBody.  # noqa: E501
        :rtype: int
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this SchoolIdUsersBody.

        A custom role id when using custom defined roles  # noqa: E501

        :param role_id: The role_id of this SchoolIdUsersBody.  # noqa: E501
        :type: int
        """

        self._role_id = role_id

    @property
    def active(self):
        """Gets the active of this SchoolIdUsersBody.  # noqa: E501

        Displays whether a user is active, if false the user will be shown a screen telling them that their account is disabled  # noqa: E501

        :return: The active of this SchoolIdUsersBody.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this SchoolIdUsersBody.

        Displays whether a user is active, if false the user will be shown a screen telling them that their account is disabled  # noqa: E501

        :param active: The active of this SchoolIdUsersBody.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def trashed(self):
        """Gets the trashed of this SchoolIdUsersBody.  # noqa: E501

        Defines if a user has been soft deleted  # noqa: E501

        :return: The trashed of this SchoolIdUsersBody.  # noqa: E501
        :rtype: bool
        """
        return self._trashed

    @trashed.setter
    def trashed(self, trashed):
        """Sets the trashed of this SchoolIdUsersBody.

        Defines if a user has been soft deleted  # noqa: E501

        :param trashed: The trashed of this SchoolIdUsersBody.  # noqa: E501
        :type: bool
        """

        self._trashed = trashed

    @property
    def alumni(self):
        """Gets the alumni of this SchoolIdUsersBody.  # noqa: E501

        Defines if a user is an alumni  # noqa: E501

        :return: The alumni of this SchoolIdUsersBody.  # noqa: E501
        :rtype: bool
        """
        return self._alumni

    @alumni.setter
    def alumni(self, alumni):
        """Sets the alumni of this SchoolIdUsersBody.

        Defines if a user is an alumni  # noqa: E501

        :param alumni: The alumni of this SchoolIdUsersBody.  # noqa: E501
        :type: bool
        """

        self._alumni = alumni

    @property
    def uid(self):
        """Gets the uid of this SchoolIdUsersBody.  # noqa: E501

        A unique id for the user which is used for SSO  # noqa: E501

        :return: The uid of this SchoolIdUsersBody.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this SchoolIdUsersBody.

        A unique id for the user which is used for SSO  # noqa: E501

        :param uid: The uid of this SchoolIdUsersBody.  # noqa: E501
        :type: str
        """

        self._uid = uid

    @property
    def external_id(self):
        """Gets the external_id of this SchoolIdUsersBody.  # noqa: E501

        An external id to reference the user  # noqa: E501

        :return: The external_id of this SchoolIdUsersBody.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this SchoolIdUsersBody.

        An external id to reference the user  # noqa: E501

        :param external_id: The external_id of this SchoolIdUsersBody.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def courses(self):
        """Gets the courses of this SchoolIdUsersBody.  # noqa: E501


        :return: The courses of this SchoolIdUsersBody.  # noqa: E501
        :rtype: list[Apiv2schoolsschoolIdusersCourses]
        """
        return self._courses

    @courses.setter
    def courses(self, courses):
        """Sets the courses of this SchoolIdUsersBody.


        :param courses: The courses of this SchoolIdUsersBody.  # noqa: E501
        :type: list[Apiv2schoolsschoolIdusersCourses]
        """

        self._courses = courses

    @property
    def question_banks(self):
        """Gets the question_banks of this SchoolIdUsersBody.  # noqa: E501


        :return: The question_banks of this SchoolIdUsersBody.  # noqa: E501
        :rtype: list[Apiv2schoolsschoolIdusersQuestionBanks]
        """
        return self._question_banks

    @question_banks.setter
    def question_banks(self, question_banks):
        """Sets the question_banks of this SchoolIdUsersBody.


        :param question_banks: The question_banks of this SchoolIdUsersBody.  # noqa: E501
        :type: list[Apiv2schoolsschoolIdusersQuestionBanks]
        """

        self._question_banks = question_banks

    @property
    def department_ids(self):
        """Gets the department_ids of this SchoolIdUsersBody.  # noqa: E501

        An array of department ids which the user will be added to. This field is ignored for any role except operators  # noqa: E501

        :return: The department_ids of this SchoolIdUsersBody.  # noqa: E501
        :rtype: list[int]
        """
        return self._department_ids

    @department_ids.setter
    def department_ids(self, department_ids):
        """Sets the department_ids of this SchoolIdUsersBody.

        An array of department ids which the user will be added to. This field is ignored for any role except operators  # noqa: E501

        :param department_ids: The department_ids of this SchoolIdUsersBody.  # noqa: E501
        :type: list[int]
        """

        self._department_ids = department_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SchoolIdUsersBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SchoolIdUsersBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
