# coding: utf-8

"""
    API V2

    #### Authorization The API can only be accessed by creating a token at: [https://ans.app/users/tokens](https://ans.app/users/tokens).<br> The provided token is a Bearer token and needs to be set in the Request Header with key Authorization and value \"Bearer [token]\" for every request.<br>  #### Pagination The API generates several headers due to its use of pagination, this includes:      - Link, the standard link header defined in RFC 8288     - Current-Page, which shows the current page of the requested data     - Page-Items, which shows the amount of items per page     - Total-Pages, which shows the total amount of pages available     - Total-Count, which shows the total count of objects that was requested  #### Rate Limits The API enforces a rate limit of 500 request per minute per ip-address. If the rate limit is exceeded, the API responds with a HTTP 429 Too Many Requests response code.<br> You can use the following response headers to confirm the current rate limit and monitor the number of requests remaining in the current minute.<br>      - RateLimit-Limit, the current limit for your account     - RateLimit-Remaining, the number of remaining requests in the current minute     - RateLimit-Reset, the number of seconds until the limit is reset  #### Search The API offers search functionality through GET requests with a query. For all search endpoints see the [Search](#/Search) section.<br>      - The query must consist of the attribute and the search value connected with a colon (:) or a greater than (>) or smaller than (<) sign.     - You can use the greater and smaller than symbols for numeric and date values.     - If your search value contains whitespaces, you must quote your search query with single or double quotes.     - You can also combine searches by using a whitespace to separate the attributes.     - If your search value is equal to \"null\", all records with null values for that attribute will be found.     - We perform case sensitive exact match searches only.     - You can search for multiple values, by adding square brackets around the search parameters and seperating the parameters using commas without spaces.     - You can see some example queries in the documented search endpoints.   #### Webhooks The API offers you the ability to listen to specific events that occur within the application. For example, you can use webhooks to:      - Archive results when an assignment is archived     - Add users after an assignment is created     - Export a result after it has been approved  When creating a webhook you can specify which events you want to listen to. You can listen to all events, all events for a specific object or only one event for an object.<br> You can listen to 'create', 'update' and 'destroy' events on an object or a combination for example:      - '*' - all events for all objects     - 'assignment' - All events for an assignment     - 'assignment.update' - Only notify when an assignment is updated  The webhooks API returns a secret after creating a new webhook. This secret can be used to verify that the webhook call comes from Ans by creating a sha256 HMAC with the request body and this secret and comparing it to the X-Ans-Signature Header.<br>  Webhook requests are automatically retried up to five times if the endpoint returns certain HTTP response codes. The time interval between retries is gradually extended. Every webhook event is logged and contains the response code, headers and body of the response for debugging purposes.<br>  The following objects are currently supported:      - Assignment     - Result     - User   # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20019(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'new_page': 'bool',
        'label_id': 'int',
        'points': 'str',
        'position': 'int',
        'qti_identifier': 'str',
        'script': 'str',
        'time_limit': 'int',
        'tags': 'list[Apiv2questionBanksquestionBankIdquestionBankExercisesTags]',
        'assignment_ids': 'list[int]',
        'assignments': 'list[InlineResponse20019Assignments]',
        'trashed': 'bool',
        'trashed_at': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'author_id': 'int',
        'external_id': 'str',
        'question_bank_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'new_page': 'new_page',
        'label_id': 'label_id',
        'points': 'points',
        'position': 'position',
        'qti_identifier': 'qti_identifier',
        'script': 'script',
        'time_limit': 'time_limit',
        'tags': 'tags',
        'assignment_ids': 'assignment_ids',
        'assignments': 'assignments',
        'trashed': 'trashed',
        'trashed_at': 'trashed_at',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'author_id': 'author_id',
        'external_id': 'external_id',
        'question_bank_id': 'question_bank_id'
    }

    def __init__(self, id=None, name=None, new_page=None, label_id=None, points=None, position=None, qti_identifier=None, script=None, time_limit=None, tags=None, assignment_ids=None, assignments=None, trashed=None, trashed_at=None, created_at=None, updated_at=None, author_id=None, external_id=None, question_bank_id=None):  # noqa: E501
        """InlineResponse20019 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._new_page = None
        self._label_id = None
        self._points = None
        self._position = None
        self._qti_identifier = None
        self._script = None
        self._time_limit = None
        self._tags = None
        self._assignment_ids = None
        self._assignments = None
        self._trashed = None
        self._trashed_at = None
        self._created_at = None
        self._updated_at = None
        self._author_id = None
        self._external_id = None
        self._question_bank_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if new_page is not None:
            self.new_page = new_page
        if label_id is not None:
            self.label_id = label_id
        if points is not None:
            self.points = points
        if position is not None:
            self.position = position
        if qti_identifier is not None:
            self.qti_identifier = qti_identifier
        if script is not None:
            self.script = script
        if time_limit is not None:
            self.time_limit = time_limit
        if tags is not None:
            self.tags = tags
        if assignment_ids is not None:
            self.assignment_ids = assignment_ids
        if assignments is not None:
            self.assignments = assignments
        if trashed is not None:
            self.trashed = trashed
        if trashed_at is not None:
            self.trashed_at = trashed_at
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if author_id is not None:
            self.author_id = author_id
        if external_id is not None:
            self.external_id = external_id
        if question_bank_id is not None:
            self.question_bank_id = question_bank_id

    @property
    def id(self):
        """Gets the id of this InlineResponse20019.  # noqa: E501


        :return: The id of this InlineResponse20019.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20019.


        :param id: The id of this InlineResponse20019.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse20019.  # noqa: E501


        :return: The name of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20019.


        :param name: The name of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def new_page(self):
        """Gets the new_page of this InlineResponse20019.  # noqa: E501


        :return: The new_page of this InlineResponse20019.  # noqa: E501
        :rtype: bool
        """
        return self._new_page

    @new_page.setter
    def new_page(self, new_page):
        """Sets the new_page of this InlineResponse20019.


        :param new_page: The new_page of this InlineResponse20019.  # noqa: E501
        :type: bool
        """

        self._new_page = new_page

    @property
    def label_id(self):
        """Gets the label_id of this InlineResponse20019.  # noqa: E501


        :return: The label_id of this InlineResponse20019.  # noqa: E501
        :rtype: int
        """
        return self._label_id

    @label_id.setter
    def label_id(self, label_id):
        """Sets the label_id of this InlineResponse20019.


        :param label_id: The label_id of this InlineResponse20019.  # noqa: E501
        :type: int
        """

        self._label_id = label_id

    @property
    def points(self):
        """Gets the points of this InlineResponse20019.  # noqa: E501


        :return: The points of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this InlineResponse20019.


        :param points: The points of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._points = points

    @property
    def position(self):
        """Gets the position of this InlineResponse20019.  # noqa: E501


        :return: The position of this InlineResponse20019.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this InlineResponse20019.


        :param position: The position of this InlineResponse20019.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def qti_identifier(self):
        """Gets the qti_identifier of this InlineResponse20019.  # noqa: E501


        :return: The qti_identifier of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._qti_identifier

    @qti_identifier.setter
    def qti_identifier(self, qti_identifier):
        """Sets the qti_identifier of this InlineResponse20019.


        :param qti_identifier: The qti_identifier of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._qti_identifier = qti_identifier

    @property
    def script(self):
        """Gets the script of this InlineResponse20019.  # noqa: E501


        :return: The script of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script):
        """Sets the script of this InlineResponse20019.


        :param script: The script of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._script = script

    @property
    def time_limit(self):
        """Gets the time_limit of this InlineResponse20019.  # noqa: E501


        :return: The time_limit of this InlineResponse20019.  # noqa: E501
        :rtype: int
        """
        return self._time_limit

    @time_limit.setter
    def time_limit(self, time_limit):
        """Sets the time_limit of this InlineResponse20019.


        :param time_limit: The time_limit of this InlineResponse20019.  # noqa: E501
        :type: int
        """

        self._time_limit = time_limit

    @property
    def tags(self):
        """Gets the tags of this InlineResponse20019.  # noqa: E501


        :return: The tags of this InlineResponse20019.  # noqa: E501
        :rtype: list[Apiv2questionBanksquestionBankIdquestionBankExercisesTags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this InlineResponse20019.


        :param tags: The tags of this InlineResponse20019.  # noqa: E501
        :type: list[Apiv2questionBanksquestionBankIdquestionBankExercisesTags]
        """

        self._tags = tags

    @property
    def assignment_ids(self):
        """Gets the assignment_ids of this InlineResponse20019.  # noqa: E501


        :return: The assignment_ids of this InlineResponse20019.  # noqa: E501
        :rtype: list[int]
        """
        return self._assignment_ids

    @assignment_ids.setter
    def assignment_ids(self, assignment_ids):
        """Sets the assignment_ids of this InlineResponse20019.


        :param assignment_ids: The assignment_ids of this InlineResponse20019.  # noqa: E501
        :type: list[int]
        """

        self._assignment_ids = assignment_ids

    @property
    def assignments(self):
        """Gets the assignments of this InlineResponse20019.  # noqa: E501


        :return: The assignments of this InlineResponse20019.  # noqa: E501
        :rtype: list[InlineResponse20019Assignments]
        """
        return self._assignments

    @assignments.setter
    def assignments(self, assignments):
        """Sets the assignments of this InlineResponse20019.


        :param assignments: The assignments of this InlineResponse20019.  # noqa: E501
        :type: list[InlineResponse20019Assignments]
        """

        self._assignments = assignments

    @property
    def trashed(self):
        """Gets the trashed of this InlineResponse20019.  # noqa: E501


        :return: The trashed of this InlineResponse20019.  # noqa: E501
        :rtype: bool
        """
        return self._trashed

    @trashed.setter
    def trashed(self, trashed):
        """Sets the trashed of this InlineResponse20019.


        :param trashed: The trashed of this InlineResponse20019.  # noqa: E501
        :type: bool
        """

        self._trashed = trashed

    @property
    def trashed_at(self):
        """Gets the trashed_at of this InlineResponse20019.  # noqa: E501


        :return: The trashed_at of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._trashed_at

    @trashed_at.setter
    def trashed_at(self, trashed_at):
        """Sets the trashed_at of this InlineResponse20019.


        :param trashed_at: The trashed_at of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._trashed_at = trashed_at

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse20019.  # noqa: E501


        :return: The created_at of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse20019.


        :param created_at: The created_at of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this InlineResponse20019.  # noqa: E501


        :return: The updated_at of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InlineResponse20019.


        :param updated_at: The updated_at of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def author_id(self):
        """Gets the author_id of this InlineResponse20019.  # noqa: E501


        :return: The author_id of this InlineResponse20019.  # noqa: E501
        :rtype: int
        """
        return self._author_id

    @author_id.setter
    def author_id(self, author_id):
        """Sets the author_id of this InlineResponse20019.


        :param author_id: The author_id of this InlineResponse20019.  # noqa: E501
        :type: int
        """

        self._author_id = author_id

    @property
    def external_id(self):
        """Gets the external_id of this InlineResponse20019.  # noqa: E501


        :return: The external_id of this InlineResponse20019.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this InlineResponse20019.


        :param external_id: The external_id of this InlineResponse20019.  # noqa: E501
        :type: str
        """

        self._external_id = external_id

    @property
    def question_bank_id(self):
        """Gets the question_bank_id of this InlineResponse20019.  # noqa: E501


        :return: The question_bank_id of this InlineResponse20019.  # noqa: E501
        :rtype: int
        """
        return self._question_bank_id

    @question_bank_id.setter
    def question_bank_id(self, question_bank_id):
        """Sets the question_bank_id of this InlineResponse20019.


        :param question_bank_id: The question_bank_id of this InlineResponse20019.  # noqa: E501
        :type: int
        """

        self._question_bank_id = question_bank_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20019, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20019):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
