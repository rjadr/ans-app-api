# coding: utf-8

"""
    API V2

    #### Authorization The API can only be accessed by creating a token at: [https://ans.app/users/tokens](https://ans.app/users/tokens).<br> The provided token is a Bearer token and needs to be set in the Request Header with key Authorization and value \"Bearer [token]\" for every request.<br>  #### Pagination The API generates several headers due to its use of pagination, this includes:      - Link, the standard link header defined in RFC 8288     - Current-Page, which shows the current page of the requested data     - Page-Items, which shows the amount of items per page     - Total-Pages, which shows the total amount of pages available     - Total-Count, which shows the total count of objects that was requested  #### Rate Limits The API enforces a rate limit of 500 request per minute per ip-address. If the rate limit is exceeded, the API responds with a HTTP 429 Too Many Requests response code.<br> You can use the following response headers to confirm the current rate limit and monitor the number of requests remaining in the current minute.<br>      - RateLimit-Limit, the current limit for your account     - RateLimit-Remaining, the number of remaining requests in the current minute     - RateLimit-Reset, the number of seconds until the limit is reset  #### Search The API offers search functionality through GET requests with a query. For all search endpoints see the [Search](#/Search) section.<br>      - The query must consist of the attribute and the search value connected with a colon (:) or a greater than (>) or smaller than (<) sign.     - You can use the greater and smaller than symbols for numeric and date values.     - If your search value contains whitespaces, you must quote your search query with single or double quotes.     - You can also combine searches by using a whitespace to separate the attributes.     - If your search value is equal to \"null\", all records with null values for that attribute will be found.     - We perform case sensitive exact match searches only.     - You can search for multiple values, by adding square brackets around the search parameters and seperating the parameters using commas without spaces.     - You can see some example queries in the documented search endpoints.   #### Webhooks The API offers you the ability to listen to specific events that occur within the application. For example, you can use webhooks to:      - Archive results when an assignment is archived     - Add users after an assignment is created     - Export a result after it has been approved  When creating a webhook you can specify which events you want to listen to. You can listen to all events, all events for a specific object or only one event for an object.<br> You can listen to 'create', 'update' and 'destroy' events on an object or a combination for example:      - '*' - all events for all objects     - 'assignment' - All events for an assignment     - 'assignment.update' - Only notify when an assignment is updated  The webhooks API returns a secret after creating a new webhook. This secret can be used to verify that the webhook call comes from Ans by creating a sha256 HMAC with the request body and this secret and comparing it to the X-Ans-Signature Header.<br>  Webhook requests are automatically retried up to five times if the endpoint returns certain HTTP response codes. The time interval between retries is gradually extended. Every webhook event is logged and contains the response code, headers and body of the response for debugging purposes.<br>  The following objects are currently supported:      - Assignment     - Result     - User   # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Apiv2coursescourseIdassignmentsIntegrations1ProctorExam(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_pen_paper': 'bool',
        'allowed_additional': 'str',
        'allowed_external_applications': 'str',
        'allowed_textbooks': 'str',
        'allowed_websites': 'str',
        'mobile_cam': 'bool',
        'restrictions': 'str'
    }

    attribute_map = {
        'allow_pen_paper': 'allow_pen_paper',
        'allowed_additional': 'allowed_additional',
        'allowed_external_applications': 'allowed_external_applications',
        'allowed_textbooks': 'allowed_textbooks',
        'allowed_websites': 'allowed_websites',
        'mobile_cam': 'mobile_cam',
        'restrictions': 'restrictions'
    }

    def __init__(self, allow_pen_paper=False, allowed_additional='', allowed_external_applications='', allowed_textbooks='', allowed_websites='', mobile_cam=False, restrictions=''):  # noqa: E501
        """Apiv2coursescourseIdassignmentsIntegrations1ProctorExam - a model defined in Swagger"""  # noqa: E501
        self._allow_pen_paper = None
        self._allowed_additional = None
        self._allowed_external_applications = None
        self._allowed_textbooks = None
        self._allowed_websites = None
        self._mobile_cam = None
        self._restrictions = None
        self.discriminator = None
        if allow_pen_paper is not None:
            self.allow_pen_paper = allow_pen_paper
        if allowed_additional is not None:
            self.allowed_additional = allowed_additional
        if allowed_external_applications is not None:
            self.allowed_external_applications = allowed_external_applications
        if allowed_textbooks is not None:
            self.allowed_textbooks = allowed_textbooks
        if allowed_websites is not None:
            self.allowed_websites = allowed_websites
        if mobile_cam is not None:
            self.mobile_cam = mobile_cam
        if restrictions is not None:
            self.restrictions = restrictions

    @property
    def allow_pen_paper(self):
        """Gets the allow_pen_paper of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501


        :return: The allow_pen_paper of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501
        :rtype: bool
        """
        return self._allow_pen_paper

    @allow_pen_paper.setter
    def allow_pen_paper(self, allow_pen_paper):
        """Sets the allow_pen_paper of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.


        :param allow_pen_paper: The allow_pen_paper of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501
        :type: bool
        """

        self._allow_pen_paper = allow_pen_paper

    @property
    def allowed_additional(self):
        """Gets the allowed_additional of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501


        :return: The allowed_additional of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501
        :rtype: str
        """
        return self._allowed_additional

    @allowed_additional.setter
    def allowed_additional(self, allowed_additional):
        """Sets the allowed_additional of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.


        :param allowed_additional: The allowed_additional of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501
        :type: str
        """

        self._allowed_additional = allowed_additional

    @property
    def allowed_external_applications(self):
        """Gets the allowed_external_applications of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501


        :return: The allowed_external_applications of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501
        :rtype: str
        """
        return self._allowed_external_applications

    @allowed_external_applications.setter
    def allowed_external_applications(self, allowed_external_applications):
        """Sets the allowed_external_applications of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.


        :param allowed_external_applications: The allowed_external_applications of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501
        :type: str
        """

        self._allowed_external_applications = allowed_external_applications

    @property
    def allowed_textbooks(self):
        """Gets the allowed_textbooks of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501


        :return: The allowed_textbooks of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501
        :rtype: str
        """
        return self._allowed_textbooks

    @allowed_textbooks.setter
    def allowed_textbooks(self, allowed_textbooks):
        """Sets the allowed_textbooks of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.


        :param allowed_textbooks: The allowed_textbooks of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501
        :type: str
        """

        self._allowed_textbooks = allowed_textbooks

    @property
    def allowed_websites(self):
        """Gets the allowed_websites of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501


        :return: The allowed_websites of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501
        :rtype: str
        """
        return self._allowed_websites

    @allowed_websites.setter
    def allowed_websites(self, allowed_websites):
        """Sets the allowed_websites of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.


        :param allowed_websites: The allowed_websites of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501
        :type: str
        """

        self._allowed_websites = allowed_websites

    @property
    def mobile_cam(self):
        """Gets the mobile_cam of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501


        :return: The mobile_cam of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501
        :rtype: bool
        """
        return self._mobile_cam

    @mobile_cam.setter
    def mobile_cam(self, mobile_cam):
        """Sets the mobile_cam of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.


        :param mobile_cam: The mobile_cam of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501
        :type: bool
        """

        self._mobile_cam = mobile_cam

    @property
    def restrictions(self):
        """Gets the restrictions of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501


        :return: The restrictions of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501
        :rtype: str
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.


        :param restrictions: The restrictions of this Apiv2coursescourseIdassignmentsIntegrations1ProctorExam.  # noqa: E501
        :type: str
        """

        self._restrictions = restrictions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Apiv2coursescourseIdassignmentsIntegrations1ProctorExam, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Apiv2coursescourseIdassignmentsIntegrations1ProctorExam):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
