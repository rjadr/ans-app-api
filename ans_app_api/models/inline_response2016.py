# coding: utf-8

"""
    API V2

    #### Authorization The API can only be accessed by creating a token at: [https://ans.app/users/tokens](https://ans.app/users/tokens).<br> The provided token is a Bearer token and needs to be set in the Request Header with key Authorization and value \"Bearer [token]\" for every request.<br>  #### Pagination The API generates several headers due to its use of pagination, this includes:      - Link, the standard link header defined in RFC 8288     - Current-Page, which shows the current page of the requested data     - Page-Items, which shows the amount of items per page     - Total-Pages, which shows the total amount of pages available     - Total-Count, which shows the total count of objects that was requested  #### Rate Limits The API enforces a rate limit of 500 request per minute per ip-address. If the rate limit is exceeded, the API responds with a HTTP 429 Too Many Requests response code.<br> You can use the following response headers to confirm the current rate limit and monitor the number of requests remaining in the current minute.<br>      - RateLimit-Limit, the current limit for your account     - RateLimit-Remaining, the number of remaining requests in the current minute     - RateLimit-Reset, the number of seconds until the limit is reset  #### Search The API offers search functionality through GET requests with a query. For all search endpoints see the [Search](#/Search) section.<br>      - The query must consist of the attribute and the search value connected with a colon (:) or a greater than (>) or smaller than (<) sign.     - You can use the greater and smaller than symbols for numeric and date values.     - If your search value contains whitespaces, you must quote your search query with single or double quotes.     - You can also combine searches by using a whitespace to separate the attributes.     - If your search value is equal to \"null\", all records with null values for that attribute will be found.     - We perform case sensitive exact match searches only.     - You can search for multiple values, by adding square brackets around the search parameters and seperating the parameters using commas without spaces.     - You can see some example queries in the documented search endpoints.   #### Webhooks The API offers you the ability to listen to specific events that occur within the application. For example, you can use webhooks to:      - Archive results when an assignment is archived     - Add users after an assignment is created     - Export a result after it has been approved  When creating a webhook you can specify which events you want to listen to. You can listen to all events, all events for a specific object or only one event for an object.<br> You can listen to 'create', 'update' and 'destroy' events on an object or a combination for example:      - '*' - all events for all objects     - 'assignment' - All events for an assignment     - 'assignment.update' - Only notify when an assignment is updated  The webhooks API returns a secret after creating a new webhook. This secret can be used to verify that the webhook call comes from Ans by creating a sha256 HMAC with the request body and this secret and comparing it to the X-Ans-Signature Header.<br>  Webhook requests are automatically retried up to five times if the endpoint returns certain HTTP response codes. The time interval between retries is gradually extended. Every webhook event is logged and contains the response code, headers and body of the response for debugging purposes.<br>  The following objects are currently supported:      - Assignment     - Result     - User   # noqa: E501

    OpenAPI spec version: v2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2016(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'exercise_id': 'int',
        'bonus': 'bool',
        'category': 'str',
        'choice_type': 'str',
        'layout': 'str',
        'content': 'str',
        'fill_content': 'str',
        'feedback_correct': 'str',
        'feedback_incorrect': 'str',
        'feedback_mistake': 'str',
        'word_limit': 'int',
        'grading_description': 'str',
        'grading_type': 'str',
        'max_bound': 'bool',
        'new_page': 'bool',
        'partial_scoring': 'bool',
        'points': 'str',
        'position': 'int',
        'predefined_answer': 'str',
        'skippable': 'bool',
        'stack_vertically': 'bool',
        'start_with_zero': 'bool',
        'trashed': 'bool',
        'zero_bound': 'bool',
        'created_at': 'str',
        'updated_at': 'str',
        'criteria': 'list[InlineResponse2016Criteria]',
        'choices': 'list[InlineResponse2016Choices]',
        'objectives': 'list[InlineResponse20029Departments]',
        'rows': 'list[InlineResponse2016Rows]',
        'columns': 'list[InlineResponse2016Rows]',
        'cells': 'list[InlineResponse2016Cells]'
    }

    attribute_map = {
        'id': 'id',
        'exercise_id': 'exercise_id',
        'bonus': 'bonus',
        'category': 'category',
        'choice_type': 'choice_type',
        'layout': 'layout',
        'content': 'content',
        'fill_content': 'fill_content',
        'feedback_correct': 'feedback_correct',
        'feedback_incorrect': 'feedback_incorrect',
        'feedback_mistake': 'feedback_mistake',
        'word_limit': 'word_limit',
        'grading_description': 'grading_description',
        'grading_type': 'grading_type',
        'max_bound': 'max_bound',
        'new_page': 'new_page',
        'partial_scoring': 'partial_scoring',
        'points': 'points',
        'position': 'position',
        'predefined_answer': 'predefined_answer',
        'skippable': 'skippable',
        'stack_vertically': 'stack_vertically',
        'start_with_zero': 'start_with_zero',
        'trashed': 'trashed',
        'zero_bound': 'zero_bound',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'criteria': 'criteria',
        'choices': 'choices',
        'objectives': 'objectives',
        'rows': 'rows',
        'columns': 'columns',
        'cells': 'cells'
    }

    def __init__(self, id=None, exercise_id=None, bonus=None, category=None, choice_type=None, layout=None, content=None, fill_content=None, feedback_correct=None, feedback_incorrect=None, feedback_mistake=None, word_limit=None, grading_description=None, grading_type=None, max_bound=None, new_page=None, partial_scoring=None, points=None, position=None, predefined_answer=None, skippable=None, stack_vertically=None, start_with_zero=None, trashed=None, zero_bound=None, created_at=None, updated_at=None, criteria=None, choices=None, objectives=None, rows=None, columns=None, cells=None):  # noqa: E501
        """InlineResponse2016 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._exercise_id = None
        self._bonus = None
        self._category = None
        self._choice_type = None
        self._layout = None
        self._content = None
        self._fill_content = None
        self._feedback_correct = None
        self._feedback_incorrect = None
        self._feedback_mistake = None
        self._word_limit = None
        self._grading_description = None
        self._grading_type = None
        self._max_bound = None
        self._new_page = None
        self._partial_scoring = None
        self._points = None
        self._position = None
        self._predefined_answer = None
        self._skippable = None
        self._stack_vertically = None
        self._start_with_zero = None
        self._trashed = None
        self._zero_bound = None
        self._created_at = None
        self._updated_at = None
        self._criteria = None
        self._choices = None
        self._objectives = None
        self._rows = None
        self._columns = None
        self._cells = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if exercise_id is not None:
            self.exercise_id = exercise_id
        if bonus is not None:
            self.bonus = bonus
        if category is not None:
            self.category = category
        if choice_type is not None:
            self.choice_type = choice_type
        if layout is not None:
            self.layout = layout
        if content is not None:
            self.content = content
        if fill_content is not None:
            self.fill_content = fill_content
        if feedback_correct is not None:
            self.feedback_correct = feedback_correct
        if feedback_incorrect is not None:
            self.feedback_incorrect = feedback_incorrect
        if feedback_mistake is not None:
            self.feedback_mistake = feedback_mistake
        if word_limit is not None:
            self.word_limit = word_limit
        if grading_description is not None:
            self.grading_description = grading_description
        if grading_type is not None:
            self.grading_type = grading_type
        if max_bound is not None:
            self.max_bound = max_bound
        if new_page is not None:
            self.new_page = new_page
        if partial_scoring is not None:
            self.partial_scoring = partial_scoring
        if points is not None:
            self.points = points
        if position is not None:
            self.position = position
        if predefined_answer is not None:
            self.predefined_answer = predefined_answer
        if skippable is not None:
            self.skippable = skippable
        if stack_vertically is not None:
            self.stack_vertically = stack_vertically
        if start_with_zero is not None:
            self.start_with_zero = start_with_zero
        if trashed is not None:
            self.trashed = trashed
        if zero_bound is not None:
            self.zero_bound = zero_bound
        if created_at is not None:
            self.created_at = created_at
        if updated_at is not None:
            self.updated_at = updated_at
        if criteria is not None:
            self.criteria = criteria
        if choices is not None:
            self.choices = choices
        if objectives is not None:
            self.objectives = objectives
        if rows is not None:
            self.rows = rows
        if columns is not None:
            self.columns = columns
        if cells is not None:
            self.cells = cells

    @property
    def id(self):
        """Gets the id of this InlineResponse2016.  # noqa: E501


        :return: The id of this InlineResponse2016.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2016.


        :param id: The id of this InlineResponse2016.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def exercise_id(self):
        """Gets the exercise_id of this InlineResponse2016.  # noqa: E501


        :return: The exercise_id of this InlineResponse2016.  # noqa: E501
        :rtype: int
        """
        return self._exercise_id

    @exercise_id.setter
    def exercise_id(self, exercise_id):
        """Sets the exercise_id of this InlineResponse2016.


        :param exercise_id: The exercise_id of this InlineResponse2016.  # noqa: E501
        :type: int
        """

        self._exercise_id = exercise_id

    @property
    def bonus(self):
        """Gets the bonus of this InlineResponse2016.  # noqa: E501


        :return: The bonus of this InlineResponse2016.  # noqa: E501
        :rtype: bool
        """
        return self._bonus

    @bonus.setter
    def bonus(self, bonus):
        """Sets the bonus of this InlineResponse2016.


        :param bonus: The bonus of this InlineResponse2016.  # noqa: E501
        :type: bool
        """

        self._bonus = bonus

    @property
    def category(self):
        """Gets the category of this InlineResponse2016.  # noqa: E501


        :return: The category of this InlineResponse2016.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this InlineResponse2016.


        :param category: The category of this InlineResponse2016.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def choice_type(self):
        """Gets the choice_type of this InlineResponse2016.  # noqa: E501


        :return: The choice_type of this InlineResponse2016.  # noqa: E501
        :rtype: str
        """
        return self._choice_type

    @choice_type.setter
    def choice_type(self, choice_type):
        """Sets the choice_type of this InlineResponse2016.


        :param choice_type: The choice_type of this InlineResponse2016.  # noqa: E501
        :type: str
        """

        self._choice_type = choice_type

    @property
    def layout(self):
        """Gets the layout of this InlineResponse2016.  # noqa: E501


        :return: The layout of this InlineResponse2016.  # noqa: E501
        :rtype: str
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this InlineResponse2016.


        :param layout: The layout of this InlineResponse2016.  # noqa: E501
        :type: str
        """

        self._layout = layout

    @property
    def content(self):
        """Gets the content of this InlineResponse2016.  # noqa: E501


        :return: The content of this InlineResponse2016.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this InlineResponse2016.


        :param content: The content of this InlineResponse2016.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def fill_content(self):
        """Gets the fill_content of this InlineResponse2016.  # noqa: E501


        :return: The fill_content of this InlineResponse2016.  # noqa: E501
        :rtype: str
        """
        return self._fill_content

    @fill_content.setter
    def fill_content(self, fill_content):
        """Sets the fill_content of this InlineResponse2016.


        :param fill_content: The fill_content of this InlineResponse2016.  # noqa: E501
        :type: str
        """

        self._fill_content = fill_content

    @property
    def feedback_correct(self):
        """Gets the feedback_correct of this InlineResponse2016.  # noqa: E501


        :return: The feedback_correct of this InlineResponse2016.  # noqa: E501
        :rtype: str
        """
        return self._feedback_correct

    @feedback_correct.setter
    def feedback_correct(self, feedback_correct):
        """Sets the feedback_correct of this InlineResponse2016.


        :param feedback_correct: The feedback_correct of this InlineResponse2016.  # noqa: E501
        :type: str
        """

        self._feedback_correct = feedback_correct

    @property
    def feedback_incorrect(self):
        """Gets the feedback_incorrect of this InlineResponse2016.  # noqa: E501


        :return: The feedback_incorrect of this InlineResponse2016.  # noqa: E501
        :rtype: str
        """
        return self._feedback_incorrect

    @feedback_incorrect.setter
    def feedback_incorrect(self, feedback_incorrect):
        """Sets the feedback_incorrect of this InlineResponse2016.


        :param feedback_incorrect: The feedback_incorrect of this InlineResponse2016.  # noqa: E501
        :type: str
        """

        self._feedback_incorrect = feedback_incorrect

    @property
    def feedback_mistake(self):
        """Gets the feedback_mistake of this InlineResponse2016.  # noqa: E501


        :return: The feedback_mistake of this InlineResponse2016.  # noqa: E501
        :rtype: str
        """
        return self._feedback_mistake

    @feedback_mistake.setter
    def feedback_mistake(self, feedback_mistake):
        """Sets the feedback_mistake of this InlineResponse2016.


        :param feedback_mistake: The feedback_mistake of this InlineResponse2016.  # noqa: E501
        :type: str
        """

        self._feedback_mistake = feedback_mistake

    @property
    def word_limit(self):
        """Gets the word_limit of this InlineResponse2016.  # noqa: E501


        :return: The word_limit of this InlineResponse2016.  # noqa: E501
        :rtype: int
        """
        return self._word_limit

    @word_limit.setter
    def word_limit(self, word_limit):
        """Sets the word_limit of this InlineResponse2016.


        :param word_limit: The word_limit of this InlineResponse2016.  # noqa: E501
        :type: int
        """

        self._word_limit = word_limit

    @property
    def grading_description(self):
        """Gets the grading_description of this InlineResponse2016.  # noqa: E501


        :return: The grading_description of this InlineResponse2016.  # noqa: E501
        :rtype: str
        """
        return self._grading_description

    @grading_description.setter
    def grading_description(self, grading_description):
        """Sets the grading_description of this InlineResponse2016.


        :param grading_description: The grading_description of this InlineResponse2016.  # noqa: E501
        :type: str
        """

        self._grading_description = grading_description

    @property
    def grading_type(self):
        """Gets the grading_type of this InlineResponse2016.  # noqa: E501


        :return: The grading_type of this InlineResponse2016.  # noqa: E501
        :rtype: str
        """
        return self._grading_type

    @grading_type.setter
    def grading_type(self, grading_type):
        """Sets the grading_type of this InlineResponse2016.


        :param grading_type: The grading_type of this InlineResponse2016.  # noqa: E501
        :type: str
        """

        self._grading_type = grading_type

    @property
    def max_bound(self):
        """Gets the max_bound of this InlineResponse2016.  # noqa: E501


        :return: The max_bound of this InlineResponse2016.  # noqa: E501
        :rtype: bool
        """
        return self._max_bound

    @max_bound.setter
    def max_bound(self, max_bound):
        """Sets the max_bound of this InlineResponse2016.


        :param max_bound: The max_bound of this InlineResponse2016.  # noqa: E501
        :type: bool
        """

        self._max_bound = max_bound

    @property
    def new_page(self):
        """Gets the new_page of this InlineResponse2016.  # noqa: E501


        :return: The new_page of this InlineResponse2016.  # noqa: E501
        :rtype: bool
        """
        return self._new_page

    @new_page.setter
    def new_page(self, new_page):
        """Sets the new_page of this InlineResponse2016.


        :param new_page: The new_page of this InlineResponse2016.  # noqa: E501
        :type: bool
        """

        self._new_page = new_page

    @property
    def partial_scoring(self):
        """Gets the partial_scoring of this InlineResponse2016.  # noqa: E501


        :return: The partial_scoring of this InlineResponse2016.  # noqa: E501
        :rtype: bool
        """
        return self._partial_scoring

    @partial_scoring.setter
    def partial_scoring(self, partial_scoring):
        """Sets the partial_scoring of this InlineResponse2016.


        :param partial_scoring: The partial_scoring of this InlineResponse2016.  # noqa: E501
        :type: bool
        """

        self._partial_scoring = partial_scoring

    @property
    def points(self):
        """Gets the points of this InlineResponse2016.  # noqa: E501


        :return: The points of this InlineResponse2016.  # noqa: E501
        :rtype: str
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this InlineResponse2016.


        :param points: The points of this InlineResponse2016.  # noqa: E501
        :type: str
        """

        self._points = points

    @property
    def position(self):
        """Gets the position of this InlineResponse2016.  # noqa: E501


        :return: The position of this InlineResponse2016.  # noqa: E501
        :rtype: int
        """
        return self._position

    @position.setter
    def position(self, position):
        """Sets the position of this InlineResponse2016.


        :param position: The position of this InlineResponse2016.  # noqa: E501
        :type: int
        """

        self._position = position

    @property
    def predefined_answer(self):
        """Gets the predefined_answer of this InlineResponse2016.  # noqa: E501


        :return: The predefined_answer of this InlineResponse2016.  # noqa: E501
        :rtype: str
        """
        return self._predefined_answer

    @predefined_answer.setter
    def predefined_answer(self, predefined_answer):
        """Sets the predefined_answer of this InlineResponse2016.


        :param predefined_answer: The predefined_answer of this InlineResponse2016.  # noqa: E501
        :type: str
        """

        self._predefined_answer = predefined_answer

    @property
    def skippable(self):
        """Gets the skippable of this InlineResponse2016.  # noqa: E501


        :return: The skippable of this InlineResponse2016.  # noqa: E501
        :rtype: bool
        """
        return self._skippable

    @skippable.setter
    def skippable(self, skippable):
        """Sets the skippable of this InlineResponse2016.


        :param skippable: The skippable of this InlineResponse2016.  # noqa: E501
        :type: bool
        """

        self._skippable = skippable

    @property
    def stack_vertically(self):
        """Gets the stack_vertically of this InlineResponse2016.  # noqa: E501


        :return: The stack_vertically of this InlineResponse2016.  # noqa: E501
        :rtype: bool
        """
        return self._stack_vertically

    @stack_vertically.setter
    def stack_vertically(self, stack_vertically):
        """Sets the stack_vertically of this InlineResponse2016.


        :param stack_vertically: The stack_vertically of this InlineResponse2016.  # noqa: E501
        :type: bool
        """

        self._stack_vertically = stack_vertically

    @property
    def start_with_zero(self):
        """Gets the start_with_zero of this InlineResponse2016.  # noqa: E501


        :return: The start_with_zero of this InlineResponse2016.  # noqa: E501
        :rtype: bool
        """
        return self._start_with_zero

    @start_with_zero.setter
    def start_with_zero(self, start_with_zero):
        """Sets the start_with_zero of this InlineResponse2016.


        :param start_with_zero: The start_with_zero of this InlineResponse2016.  # noqa: E501
        :type: bool
        """

        self._start_with_zero = start_with_zero

    @property
    def trashed(self):
        """Gets the trashed of this InlineResponse2016.  # noqa: E501


        :return: The trashed of this InlineResponse2016.  # noqa: E501
        :rtype: bool
        """
        return self._trashed

    @trashed.setter
    def trashed(self, trashed):
        """Sets the trashed of this InlineResponse2016.


        :param trashed: The trashed of this InlineResponse2016.  # noqa: E501
        :type: bool
        """

        self._trashed = trashed

    @property
    def zero_bound(self):
        """Gets the zero_bound of this InlineResponse2016.  # noqa: E501


        :return: The zero_bound of this InlineResponse2016.  # noqa: E501
        :rtype: bool
        """
        return self._zero_bound

    @zero_bound.setter
    def zero_bound(self, zero_bound):
        """Sets the zero_bound of this InlineResponse2016.


        :param zero_bound: The zero_bound of this InlineResponse2016.  # noqa: E501
        :type: bool
        """

        self._zero_bound = zero_bound

    @property
    def created_at(self):
        """Gets the created_at of this InlineResponse2016.  # noqa: E501


        :return: The created_at of this InlineResponse2016.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this InlineResponse2016.


        :param created_at: The created_at of this InlineResponse2016.  # noqa: E501
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this InlineResponse2016.  # noqa: E501


        :return: The updated_at of this InlineResponse2016.  # noqa: E501
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this InlineResponse2016.


        :param updated_at: The updated_at of this InlineResponse2016.  # noqa: E501
        :type: str
        """

        self._updated_at = updated_at

    @property
    def criteria(self):
        """Gets the criteria of this InlineResponse2016.  # noqa: E501


        :return: The criteria of this InlineResponse2016.  # noqa: E501
        :rtype: list[InlineResponse2016Criteria]
        """
        return self._criteria

    @criteria.setter
    def criteria(self, criteria):
        """Sets the criteria of this InlineResponse2016.


        :param criteria: The criteria of this InlineResponse2016.  # noqa: E501
        :type: list[InlineResponse2016Criteria]
        """

        self._criteria = criteria

    @property
    def choices(self):
        """Gets the choices of this InlineResponse2016.  # noqa: E501


        :return: The choices of this InlineResponse2016.  # noqa: E501
        :rtype: list[InlineResponse2016Choices]
        """
        return self._choices

    @choices.setter
    def choices(self, choices):
        """Sets the choices of this InlineResponse2016.


        :param choices: The choices of this InlineResponse2016.  # noqa: E501
        :type: list[InlineResponse2016Choices]
        """

        self._choices = choices

    @property
    def objectives(self):
        """Gets the objectives of this InlineResponse2016.  # noqa: E501


        :return: The objectives of this InlineResponse2016.  # noqa: E501
        :rtype: list[InlineResponse20029Departments]
        """
        return self._objectives

    @objectives.setter
    def objectives(self, objectives):
        """Sets the objectives of this InlineResponse2016.


        :param objectives: The objectives of this InlineResponse2016.  # noqa: E501
        :type: list[InlineResponse20029Departments]
        """

        self._objectives = objectives

    @property
    def rows(self):
        """Gets the rows of this InlineResponse2016.  # noqa: E501


        :return: The rows of this InlineResponse2016.  # noqa: E501
        :rtype: list[InlineResponse2016Rows]
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this InlineResponse2016.


        :param rows: The rows of this InlineResponse2016.  # noqa: E501
        :type: list[InlineResponse2016Rows]
        """

        self._rows = rows

    @property
    def columns(self):
        """Gets the columns of this InlineResponse2016.  # noqa: E501


        :return: The columns of this InlineResponse2016.  # noqa: E501
        :rtype: list[InlineResponse2016Rows]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this InlineResponse2016.


        :param columns: The columns of this InlineResponse2016.  # noqa: E501
        :type: list[InlineResponse2016Rows]
        """

        self._columns = columns

    @property
    def cells(self):
        """Gets the cells of this InlineResponse2016.  # noqa: E501


        :return: The cells of this InlineResponse2016.  # noqa: E501
        :rtype: list[InlineResponse2016Cells]
        """
        return self._cells

    @cells.setter
    def cells(self, cells):
        """Sets the cells of this InlineResponse2016.


        :param cells: The cells of this InlineResponse2016.  # noqa: E501
        :type: list[InlineResponse2016Cells]
        """

        self._cells = cells

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2016, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2016):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
